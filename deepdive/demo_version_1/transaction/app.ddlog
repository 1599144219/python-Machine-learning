@source
transaction_dbdata(
    @key
    company1_name text,
    @key
    company2_name text
).

sentences_nlp(
    sentences_list text
).
sentences(
    doc_id	text,
    sentence_index	int,
    sentence_text	text,
    tokens	text[],
    lemmas	text[],
    pos_tags	text[],
    ner_tags	text[],
    dep_types	text[],
    dep_tokens	int[]
).
function nlp_markup over (
    sentences_list    text
) returns rows like sentences
implementation "udf/nlp_markup.py" handles tsv lines.

sentences += nlp_markup(sentences_list) :-
sentences_nlp(sentences_list).

company_mention(
    mention_id	text,
    mention_text	text,
    doc_id	text,
    sentence_index	int,
    begin_index	int,
    end_index	int
).

function map_company_mention over (
    doc_id	text,
    sentence_index	int,
    tokens	text[],
    ner_tags	text[]
) returns rows like company_mention
implementation "udf/map_company_mention.py" handles tsv lines.

company_mention += map_company_mention(
doc_id, sentence_index, tokens, ner_tags
) :-
sentences(doc_id, sentence_index, _, tokens, _, _, ner_tags, _, _).

transaction_candidate(
    p1_id	text,
    p1_name	text,
    p2_id	text,
    p2_name	text
).

num_company(doc_id, sentence_index, COUNT(p)) :-
company_mention(p, _, doc_id, sentence_index, _, _).

function map_transaction_candidate over (
    p1_id	text,
    p1_name	text,
    p2_id	text,
    p2_name	text
) returns rows like transaction_candidate
implementation "udf/map_transaction_candidate.py" handles tsv lines.

transaction_candidate += map_transaction_candidate(p1, p1_name, p2, p2_name) :-
num_company(same_doc, same_sentence, num_p),
company_mention(p1, p1_name, same_doc, same_sentence, p1_begin, _),
company_mention(p2, p2_name, same_doc, same_sentence, p2_begin, _),
num_p < 5,
p1_name != p2_name,
p1_begin != p2_begin.

transaction_feature(
    p1_id	text,
    p2_id	text,
    feature	text
).

function extract_transaction_features over (
    p1_id	text,
    p2_id	text,
    p1_begin_index	int,
    p1_end_index	int,
    p2_begin_index	int,
    p2_end_index	int,
    doc_id	text,
    sent_index	int,
    tokens	text[],
    lemmas	text[],
    pos_tags	text[],
    ner_tags	text[],
    dep_types	text[],
    dep_tokens	int[]
) returns rows like transaction_feature
implementation "udf/extract_transaction_features.py" handles tsv lines.

transaction_feature += extract_transaction_features(
p1_id, p2_id, p1_begin_index, p1_end_index, p2_begin_index, p2_end_index,
doc_id, sent_index, tokens, lemmas, pos_tags, ner_tags, dep_types, dep_tokens
) :-
company_mention(p1_id, _, doc_id, sent_index, p1_begin_index, p1_end_index),
company_mention(p2_id, _, doc_id, sent_index, p2_begin_index, p2_end_index),
sentences(doc_id, sent_index, _, tokens, lemmas, pos_tags, ner_tags,dep_types,
dep_tokens).

@extraction
transaction_label(
    @key
    @references(relation="has_transaction", column="p1_id", alias="has_transaction")
    p1_id	text,
    @key
    @references(relation="has_transaction", column="p2_id", alias="has_transaction")
    p2_id	text,
    @navigable
    label	int,
    @navigable
    rule_id	text
).

transaction_label(p1, p2, 0, NULL) :- transaction_candidate(p1, _, p2, _).

transaction_label(p1,p2, 3, "from_dbdata") :-
transaction_candidate(p1, p1_name, p2, p2_name), transaction_dbdata(n1, n2),
[ lower(n1) = lower(p1_name), lower(n2) = lower(p2_name) ;
lower(n2) = lower(p1_name), lower(n1) = lower(p2_name) ].

function supervise over (
    p1_id text, p1_begin int, p1_end int,
    p2_id text, p2_begin int, p2_end int,
    doc_id	text,
    sentence_index	int,
    sentence_text	text,
    tokens	text[],
    lemmas	text[],
    pos_tags	text[],
    ner_tags	text[],
    dep_types	text[],
    dep_tokens	int[]
) returns (
    p1_id text, p2_id text, label int, rule_id text
)
implementation "udf/supervise_transaction.py" handles tsv lines.

transaction_label += supervise(
p1_id, p1_begin, p1_end,
p2_id, p2_begin, p2_end,
doc_id, sentence_index, sentence_text,
tokens, lemmas, pos_tags, ner_tags, dep_types, dep_token_indexes
) :-
transaction_candidate(p1_id, _, p2_id, _),
company_mention(p1_id, p1_text, doc_id, sentence_index, p1_begin, p1_end),
company_mention(p2_id, p2_text, _, _, p2_begin, p2_end),
sentences(
    doc_id, sentence_index, sentence_text,
    tokens, lemmas, pos_tags, ner_tags,dep_types, dep_token_indexes
).

transaction_label_resolved(p1_id, p2_id, SUM(vote)) :-transaction_label(p1_id, p2_id, vote, rule_id).

@extraction
has_transaction?(
    p1_id	text,
    p2_id	text
).

has_transaction(p1_id, p2_id) = if l > 0 then TRUE
                                else if l < 0 then FALSE
                                else NULL end :- transaction_label_resolved(p1_id, p2_id, l).

@weight(f)
has_transaction(p1_id, p2_id) :-
transaction_candidate(p1_id, _, p2_id, _),
transaction_feature(p1_id, p2_id, f).

@weight(3.0)
has_transaction(p1_id, p2_id) => has_transaction(p2_id, p1_id) :-
transaction_candidate(p1_id, _, p2_id, _).
